{"ast":null,"code":"import axios from \"axios\";\nconst URLAPI = process.env.REACT_APP_URLAPI;\nexport const sendPost = async (route, data = undefined, token) => {\n  console.log(\"sendPost\", route, data, token);\n  console.log(\"URLAPI\", URLAPI);\n  try {\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    if (token) headers.Authorization = `Bearer ${token}`;\n    const {\n      data: apiResponse\n    } = await axios.post(`${URLAPI}${route}`, data, {\n      headers,\n      timeout: 10000\n    });\n    return apiResponse;\n  } catch (error) {\n    return processError(error);\n  }\n};\nexport const sendPatch = async (route, data = undefined, token) => {\n  try {\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    if (token) headers.Authorization = `Bearer ${token}`;\n    const {\n      data: apiResponse\n    } = await axios.patch(`${URLAPI}${route}`, data, {\n      headers,\n      timeout: 10000\n    });\n    return apiResponse;\n  } catch (error) {\n    return processError(error);\n  }\n};\nexport const sendGet = async (route, params = {}, token) => {\n  try {\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    if (token) headers.Authorization = `Bearer ${token}`;\n    const query = new URLSearchParams(params).toString();\n    const {\n      data: apiResponse\n    } = await axios.get(`${URLAPI}${route}?${query}`, {\n      headers,\n      timeout: 10000\n    });\n    return apiResponse;\n  } catch (error) {\n    return processError(error);\n  }\n};\nfunction processError(error) {\n  console.error(\"API Error:\", error);\n  if (error.response && error.response.data) {\n    return error.response.data;\n  }\n  return {\n    success: false,\n    message: error.message || \"Error inesperado\"\n  };\n}","map":{"version":3,"names":["axios","URLAPI","process","env","REACT_APP_URLAPI","sendPost","route","data","undefined","token","console","log","headers","Authorization","apiResponse","post","timeout","error","processError","sendPatch","patch","sendGet","params","query","URLSearchParams","toString","get","response","success","message"],"sources":["C:/Users/tig1/Desktop/Nueva carpeta (3)/projectManagement/frontend/src/connections/backendConnect.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst URLAPI = process.env.REACT_APP_URLAPI;\r\n\r\nexport const sendPost = async (route, data = undefined, token) => {\r\n  console.log(\"sendPost\", route, data, token);\r\n  console.log(\"URLAPI\", URLAPI);\r\n  try {\r\n    const headers = {\r\n      \"Content-Type\": \"application/json\",\r\n    };\r\n    if (token) headers.Authorization = `Bearer ${token}`;\r\n\r\n    const { data: apiResponse } = await axios.post(`${URLAPI}${route}`, data, {\r\n      headers,\r\n      timeout: 10000,\r\n    });\r\n\r\n    return apiResponse;\r\n  } catch (error) {\r\n    return processError(error);\r\n  }\r\n};\r\n\r\nexport const sendPatch = async (route, data = undefined, token) => {\r\n  try {\r\n    const headers = {\r\n      \"Content-Type\": \"application/json\",\r\n    };\r\n    if (token) headers.Authorization = `Bearer ${token}`;\r\n\r\n    const { data: apiResponse } = await axios.patch(`${URLAPI}${route}`, data, {\r\n      headers,\r\n      timeout: 10000,\r\n    });\r\n\r\n    return apiResponse;\r\n  } catch (error) {\r\n    return processError(error);\r\n  }\r\n};\r\n\r\nexport const sendGet = async (route, params = {}, token) => {\r\n  try {\r\n    const headers = {\r\n      \"Content-Type\": \"application/json\",\r\n    };\r\n    if (token) headers.Authorization = `Bearer ${token}`;\r\n\r\n    const query = new URLSearchParams(params).toString();\r\n\r\n    const { data: apiResponse } = await axios.get(`${URLAPI}${route}?${query}`, {\r\n      headers,\r\n      timeout: 10000,\r\n    });\r\n\r\n    return apiResponse;\r\n  } catch (error) {\r\n    return processError(error);\r\n  }\r\n};\r\n\r\nfunction processError(error) {\r\n  console.error(\"API Error:\", error);\r\n  if (error.response && error.response.data) {\r\n    return error.response.data;\r\n  }\r\n  return { success: false, message: error.message || \"Error inesperado\" };\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,gBAAgB;AAE3C,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,KAAK,EAAEC,IAAI,GAAGC,SAAS,EAAEC,KAAK,KAAK;EAChEC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEL,KAAK,EAAEC,IAAI,EAAEE,KAAK,CAAC;EAC3CC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEV,MAAM,CAAC;EAC7B,IAAI;IACF,MAAMW,OAAO,GAAG;MACd,cAAc,EAAE;IAClB,CAAC;IACD,IAAIH,KAAK,EAAEG,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;IAEpD,MAAM;MAAEF,IAAI,EAAEO;IAAY,CAAC,GAAG,MAAMd,KAAK,CAACe,IAAI,CAAC,GAAGd,MAAM,GAAGK,KAAK,EAAE,EAAEC,IAAI,EAAE;MACxEK,OAAO;MACPI,OAAO,EAAE;IACX,CAAC,CAAC;IAEF,OAAOF,WAAW;EACpB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACd,OAAOC,YAAY,CAACD,KAAK,CAAC;EAC5B;AACF,CAAC;AAED,OAAO,MAAME,SAAS,GAAG,MAAAA,CAAOb,KAAK,EAAEC,IAAI,GAAGC,SAAS,EAAEC,KAAK,KAAK;EACjE,IAAI;IACF,MAAMG,OAAO,GAAG;MACd,cAAc,EAAE;IAClB,CAAC;IACD,IAAIH,KAAK,EAAEG,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;IAEpD,MAAM;MAAEF,IAAI,EAAEO;IAAY,CAAC,GAAG,MAAMd,KAAK,CAACoB,KAAK,CAAC,GAAGnB,MAAM,GAAGK,KAAK,EAAE,EAAEC,IAAI,EAAE;MACzEK,OAAO;MACPI,OAAO,EAAE;IACX,CAAC,CAAC;IAEF,OAAOF,WAAW;EACpB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACd,OAAOC,YAAY,CAACD,KAAK,CAAC;EAC5B;AACF,CAAC;AAED,OAAO,MAAMI,OAAO,GAAG,MAAAA,CAAOf,KAAK,EAAEgB,MAAM,GAAG,CAAC,CAAC,EAAEb,KAAK,KAAK;EAC1D,IAAI;IACF,MAAMG,OAAO,GAAG;MACd,cAAc,EAAE;IAClB,CAAC;IACD,IAAIH,KAAK,EAAEG,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;IAEpD,MAAMc,KAAK,GAAG,IAAIC,eAAe,CAACF,MAAM,CAAC,CAACG,QAAQ,CAAC,CAAC;IAEpD,MAAM;MAAElB,IAAI,EAAEO;IAAY,CAAC,GAAG,MAAMd,KAAK,CAAC0B,GAAG,CAAC,GAAGzB,MAAM,GAAGK,KAAK,IAAIiB,KAAK,EAAE,EAAE;MAC1EX,OAAO;MACPI,OAAO,EAAE;IACX,CAAC,CAAC;IAEF,OAAOF,WAAW;EACpB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACd,OAAOC,YAAY,CAACD,KAAK,CAAC;EAC5B;AACF,CAAC;AAED,SAASC,YAAYA,CAACD,KAAK,EAAE;EAC3BP,OAAO,CAACO,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;EAClC,IAAIA,KAAK,CAACU,QAAQ,IAAIV,KAAK,CAACU,QAAQ,CAACpB,IAAI,EAAE;IACzC,OAAOU,KAAK,CAACU,QAAQ,CAACpB,IAAI;EAC5B;EACA,OAAO;IAAEqB,OAAO,EAAE,KAAK;IAAEC,OAAO,EAAEZ,KAAK,CAACY,OAAO,IAAI;EAAmB,CAAC;AACzE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}